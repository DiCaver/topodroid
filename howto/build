Howto Build with ant

[0] Java version is set with JAVA_HOME environment
# export JAVA_HOME=/usr/local/java/jre-11.0.12
export JAVA_HOME=/home/programs/android-studio/jre

[1] Android setup:
/home/programs/android-sdk : all android stuff
/home/programs/android-ndk : all android NDK stuff

[2] Topodroid setup.

Home:
/home/programs/android-sdk/sample/android-8/topodroid

It contains
AndroidManifest.xml, res, src, jni, assets, libs, symbols-git, other dirs
build.xml, proguard.cfg, project.properties, make_symbols.sh

It also has subdir ant with
build.properties, local.properties

Notes.
Translations are symlinks in res to subdirs in int18.
Icons are symlinks in res to subdir in drawable.
Symbols are in symbols-git and make_symbol.sh creates the zips
Subdirs bin gen are created by the build

More notes
the directory src used to have androidx linking ../aosp/androidx, but it is not necessary

[3] TopoDroid debug build.
   ant debug
or 
   make
   
[4] TopoDroid debug install.
   adb install -r bin/DistoX-debug.apk
or
   make install
   
N.B. to build/install release apk replace "debug" with "release".
Keystore and key for topodroid are not included in the repo :-)

[5] TopoDroid release build
   make release
This is however not suitable for install on newer Androids. 
Therefore use
   make signed
which creates a v1-3 signed apk.

Next get size and md5
   make md5
   [] upload the signed apk to speleoapks
   mv Topodroid-... APKS
cd ../speleoapks and git push

----------------------------------------------------------------
Howto Build with studio

[2] TopoDroid studio setup

create an empty Studio project with name TDX
package com.topodroid.TDX
minSdk 18
targetSdk 29 or higher
compileOptions:
  sourceCompatibility JavaVersion.VERSION_1_8
  targetCompatibility JavaVersion.VERSION_1_8

Home: i chose samples/android-8/TDX, but you can choose whatever you want

Next you have to copy/symlink the source file. They go inside "app/src/main".
The important folders are:
  "assets"  a symlink to the repo "assets"
  "java"    a copy of the repo "src"
  "jniLibs" a symlink to the repo "libs" (native libs)
  "res"     contains symlinks to the repo subfolders of "res"
You can do without jniLibs if you comment out native calls.
The other important file is "AndroidManifest.xml", a copy of the repo file.
The other files are bloated by Studio.
  app/
      app.iml
      build.bundle
      build.gradle
      proguard-rules.pro
      build/
      libs/ (empty)
      src/
          androidTest
          main/
               AndroidManifest.xml
               assets -->
               java -->
               jni -->
               libs ( jni builds )
               res/
                   drawable layout raw values xml -->
                   drawable-*
                   drawable-v24
                   values-v16
          test
  gradle/wrapper/gradle-wrapper.jar
                 gradle-wrapper.properties
  build.gradle
  gradle.properties
  local.properties ( ndk.dir and sdk.dir )
  gradlew.bat
  gradlew
  settings.gradle
